{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nlet userSelectedDate = null;\nlet timerId = null;\n\nconst startBtn = document.querySelector('[data-start]');\nconst inputEl = document.querySelector('#datetime-picker');\n\nstartBtn.disabled = true;\nconst options = {\n    enableTime: true,           \n    time_24hr: true,            \n    defaultDate: new Date(),    \n    minuteIncrement: 1,         \n    onClose(selectedDates) {\n        const selectedDate = selectedDates[0];\n        const currentDate = new Date();\n    \n        if (selectedDate <= currentDate) {\n            iziToast.warning({\n                title: 'Invalid Date',\n                message: 'Please choose a date in the future',\n                position: 'topRight',\n                timeout: 4000,\n              });              \n          startBtn.disabled = true;\n        } else {\n          userSelectedDate = selectedDate;\n          startBtn.disabled = false;\n        }\n      },\n    };\n  \nflatpickr(\"#datetime-picker\", options);\n  \n  startBtn.addEventListener(\"click\", () => {\n    if (!userSelectedDate) return;\n  \n    startBtn.disabled = true;\n    inputEl.disabled = true;\n  \n    timerId = setInterval(() => {\n      const now = new Date();\n      const diff = userSelectedDate - now;\n  \n      if (diff <= 0) {\n        clearInterval(timerId);\n        return;\n      }\n  \n      const { days, hours, minutes, seconds } = convertMs(diff);\n  \n      document.querySelector('[data-days]').textContent = addLeadingZero(days);\n      document.querySelector('[data-hours]').textContent = addLeadingZero(hours);\n      document.querySelector('[data-minutes]').textContent = addLeadingZero(minutes);\n      document.querySelector('[data-seconds]').textContent = addLeadingZero(seconds);\n    }, 1000);\n  });\n  \n  function convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor((ms % hour) / minute);\n    const seconds = Math.floor((ms % minute) / second);\n  \n    return { days, hours, minutes, seconds };\n  }\n  \n  function addLeadingZero(value) {\n    return String(value).padStart(2, \"0\");\n}\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n"],"names":["userSelectedDate","timerId","startBtn","inputEl","options","selectedDates","selectedDate","iziToast","flatpickr","diff","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"0IAEA,IAAIA,EAAmB,KACnBC,EAAU,KAEd,MAAMC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAU,SAAS,cAAc,kBAAkB,EAEzDD,EAAS,SAAW,GACpB,MAAME,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnB,MAAMC,EAAeD,EAAc,CAAC,EAGhCC,GAFgB,IAAI,MAGpBC,EAAS,QAAQ,CACb,MAAO,eACP,QAAS,qCACT,SAAU,WACV,QAAS,GACzB,CAAe,EACLL,EAAS,SAAW,KAEpBF,EAAmBM,EACnBJ,EAAS,SAAW,GAEvB,CACP,EAEAM,EAAU,mBAAoBJ,CAAO,EAEnCF,EAAS,iBAAiB,QAAS,IAAM,CAClCF,IAELE,EAAS,SAAW,GACpBC,EAAQ,SAAW,GAEnBF,EAAU,YAAY,IAAM,CAE1B,MAAMQ,EAAOT,EADD,IAAI,KAGhB,GAAIS,GAAQ,EAAG,CACb,cAAcR,CAAO,EACrB,MACD,CAED,KAAM,CAAE,KAAAS,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAI,EAExD,SAAS,cAAc,aAAa,EAAE,YAAcM,EAAeL,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcK,EAAeJ,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YAAcI,EAAeH,CAAO,EAC7E,SAAS,cAAc,gBAAgB,EAAE,YAAcG,EAAeF,CAAO,CAC9E,EAAE,GAAI,EACX,CAAG,EAED,SAASC,EAAUE,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAOI,EAAK,KAAQ,GAAM,EACzCH,EAAU,KAAK,MAAOG,EAAK,IAAU,GAAM,EAEjD,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAED,SAASE,EAAeE,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC"}